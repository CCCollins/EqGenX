import tkinter as tk
from tkinter import simpledialog, messagebox
import json
import os

TASKS_FILE = "tasks.json"


class EquationEditor:
    def __init__(self, root):
        self.root = root
        self.root.title("–†–µ–¥–∞–∫—Ç–æ—Ä —à–∞–±–ª–æ–Ω–æ–≤ —É—Ä–∞–≤–Ω–µ–Ω–∏–π")
        self.equations = []

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º –∏ —Ö–æ–ª—Å—Ç –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        self.canvas = tk.Canvas(self.root)
        self.scrollbar = tk.Scrollbar(self.root, orient="vertical", command=self.canvas.yview)
        self.canvas.configure(yscrollcommand=self.scrollbar.set)

        self.scrollable_frame = tk.Frame(self.canvas)
        self.canvas.create_window((0, 0), window=self.scrollable_frame, anchor="nw")
        self.scrollbar.pack(side=tk.RIGHT, fill="y")
        self.canvas.pack(fill="both", expand=True)

        self.load_tasks()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self.render_list()

        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∫–æ–ª–µ—Å–∏–∫–∞ –º—ã—à–∏
        self.canvas.bind_all("<MouseWheel>", self.on_mouse_wheel)

        btn_frame = tk.Frame(self.root)
        btn_frame.pack(pady=5)

        tk.Button(btn_frame, text="–î–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω", command=self.add_template).pack(side=tk.LEFT, padx=5)
        tk.Button(btn_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=self.save_tasks).pack(side=tk.LEFT, padx=5)

    def load_tasks(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∑–∞–¥–∞—á–∏ –∏–∑ —Ñ–∞–π–ª–∞ tasks.json, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
        if os.path.exists(TASKS_FILE):
            try:
                with open(TASKS_FILE, "r", encoding="utf-8") as f:
                    self.equations = json.load(f)
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —à–∞–±–ª–æ–Ω—ã:\n{e}")
                self.equations = []
        else:
            self.equations = []

    def save_tasks(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–¥–∞—á–∏ –≤ —Ñ–∞–π–ª tasks.json."""
        try:
            with open(TASKS_FILE, "w", encoding="utf-8") as f:
                json.dump(self.equations, f, indent=2, ensure_ascii=False)
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω—ã:\n{e}")

    def render_list(self):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ —É—Ä–∞–≤–Ω–µ–Ω–∏–π."""
        for widget in self.scrollable_frame.winfo_children():
            widget.destroy()

        for idx, eq in enumerate(self.equations):
            self.render_equation(eq, idx)

        self.scrollable_frame.update_idletasks()
        self.canvas.config(scrollregion=self.canvas.bbox("all"))

    def render_equation(self, eq, idx):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω —É—Ä–∞–≤–Ω–µ–Ω–∏—è."""
        row = tk.Frame(self.scrollable_frame)
        row.pack(fill="x", pady=2)

        var_enabled = tk.BooleanVar(value=eq.get("enabled", True))
        chk = tk.Checkbutton(row, variable=var_enabled,
                             command=lambda i=idx, v=var_enabled: self.update_enabled(i, v))
        chk.pack(side=tk.LEFT)

        lbl = tk.Label(row, text=eq["template"], anchor="w")
        lbl.pack(side=tk.LEFT, fill="x", expand=True)

        btn_delete = tk.Button(row, text="üóë", command=lambda: self.delete_equation(idx))
        btn_delete.pack(side=tk.RIGHT)

        btn_edit = tk.Button(row, text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", command=lambda: self.edit_equation(idx))
        btn_edit.pack(side=tk.RIGHT, padx=5)

    def update_enabled(self, idx, var):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ 'enabled'."""
        self.equations[idx]["enabled"] = var.get()

    def delete_equation(self, idx):
        """–£–¥–∞–ª—è–µ—Ç —à–∞–±–ª–æ–Ω —É—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–æ –∏–Ω–¥–µ–∫—Å—É."""
        del self.equations[idx]
        self.render_list()

    def add_template(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω —É—Ä–∞–≤–Ω–µ–Ω–∏—è."""
        new_template = simpledialog.askstring("–ù–æ–≤—ã–π —à–∞–±–ª–æ–Ω", "–í–≤–µ–¥–∏—Ç–µ —à–∞–±–ª–æ–Ω, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n{a}*x + {b} = {c}*x + {d}")
        if new_template:
            self.equations.append({
                "template": new_template,
                "enabled": True
            })
            self.render_list()

    def edit_equation(self, idx):
        """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —à–∞–±–ª–æ–Ω —É—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–æ –∏–Ω–¥–µ–∫—Å—É."""
        new_template = simpledialog.askstring("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞", "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω:",
                                              initialvalue=self.equations[idx]["template"])
        if new_template:
            self.equations[idx]["template"] = new_template
            self.render_list()

    def on_mouse_wheel(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∫–æ–ª–µ—Å–∏–∫–∞ –º—ã—à–∏."""
        self.canvas.yview_scroll(-1 * int(event.delta / 120), "units")


def run_editor():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–æ—Ä —à–∞–±–ª–æ–Ω–æ–≤ —É—Ä–∞–≤–Ω–µ–Ω–∏–π."""
    try:
        root = tk.Toplevel()
    except:
        root = tk.Tk()

    editor = EquationEditor(root)
    root.geometry("380x520")
    root.mainloop()
